name: mybuild

on:
  schedule:
    - cron: 6 */8 * * *
#  push:
#    branches:
#      - main
#  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 自动版本号
        run: |
          mkdir -p config

          # 检查 version 文件是否存在，不存在则创建并初始化为 0.0.0
          if [ ! -f config/version ]; then
              echo "0.0.0" > config/version
          fi

          # 检查 versionCode 文件是否存在，不存在则创建并初始化为 1
          if [ ! -f config/versionCode ]; then
              echo "1" > config/versionCode
          fi

          # 读取 versionCode 和 version
          versionCode=$(cat config/versionCode)
          VERSION=$(cat config/version)

          # 以"."分割版本号，并将其放入数组中
          IFS='.' read -r -a versionArray <<< "$VERSION"

          # 递增最后一位数字
          ((versionArray[2]++))

          # 如果最后一位数字达到了20，则将它设为0并递增前一位数字
          if [ "${versionArray[2]}" -eq 20 ]; then
              versionArray[2]=0
              ((versionArray[1]++))

              # 如果第二位数字达到了20，则将它设为0并递增第一位数字
              if [ "${versionArray[1]}" -eq 20 ]; then
                  versionArray[1]=0
                  ((versionArray[0]++))
              fi
          fi

          # 递增 versionCode
          ((versionCode++))

          # 将新版本号和 versionCode 写回到文件中
          echo "$versionCode" > config/versionCode
          echo "${versionArray[0]}.${versionArray[1]}.${versionArray[2]}" > config/version

          # 读取新版本号
          vss=$(cat config/version)

          # 打印新版本号到 $GITHUB_ENV
          echo "versionCode=$versionCode" >> $GITHUB_ENV
          echo "version=$vss" >> $GITHUB_ENV

          # 打印发布时间到 bgcode.txt
          echo "**发布时间：$(date +'%Y-%m-%d %H:%M:%S')**" >> bgcode.txt
            
      - name: Build With Gradle
        run: |
          sed -i "/   versionCode/c\\versionCode  ${{ env.versionCode }}" ./app/build.gradle
          sed -i "/   versionName/c\\versionName '${{ env.version }}'" ./app/build.gradle
          chmod +x gradlew
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all

      - name: Prepare App
        run: |
          mkdir -p ${{ github.workspace }}/apk/
          for file in `find ~ -name "*.apk" -print`; do
            mv "$file" ${{ github.workspace }}/apk/
          done

      - name: Commit and push changes
        run: |
              git config --local user.email bglhcode@icloud.com
              git config --local user.name  bgcode
              git pull
              git add ./config/version  ./config/versionCode
              git commit -m "更新version版本"
              git push

      - name: Upload App To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: com.github.tvbox.osc
          path: ${{ github.workspace }}/apk/*
      - name: 发布到release
        uses: softprops/action-gh-release@v1
        with:
            tag_name: v${{ env.version }}
            body_path: bgcode.txt
            files: ${{ github.workspace }}/apk/*